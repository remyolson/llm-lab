[pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options with parallel execution
addopts =
    # Parallel execution configuration
    -n auto
    --dist loadscope
    --maxprocesses=4
    # Verbosity and output
    -v
    --strict-markers
    --tb=short
    # Coverage configuration
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=term:skip-covered
    --cov-report=xml
    --cov-fail-under=96
    # Performance reporting
    --durations=10

# Coverage configuration
[coverage:run]
omit =
    */tests/*
    */venv/*
    */__pycache__/*
    */site-packages/*
    test_*.py
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Markers for organizing tests
markers =
    unit: Unit tests that don't require external resources
    integration: Integration tests that may require API keys
    e2e: End-to-end tests
    benchmark: Performance benchmark tests
    slow: Tests that take more than a few seconds to run
    performance: Performance benchmark tests
    compatibility: Cross-provider compatibility tests
    edge_case: Edge case and error handling tests
    requires_api: Tests that require real API keys
