name: Optimized CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  CACHE_NUMBER: 1  # Increment to reset cache

jobs:
  # Quick checks that can fail fast
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      python-files-changed: ${{ steps.changes.outputs.python }}
      workflows-changed: ${{ steps.changes.outputs.workflows }}
      docs-changed: ${{ steps.changes.outputs.docs }}

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          python:
            - '**/*.py'
            - 'requirements*.txt'
            - 'pyproject.toml'
            - 'setup.py'
          workflows:
            - '.github/workflows/**'
          docs:
            - 'docs/**'
            - '*.md'

    - name: Check commit message
      if: github.event_name == 'pull_request'
      run: |
        # Get all commit messages in this PR
        git log --format=%B origin/${{ github.base_ref }}..HEAD | while read line; do
          # Check for conventional commit format
          if ! echo "$line" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
            if [ ! -z "$line" ]; then
              echo "⚠️ Non-conventional commit message: $line"
            fi
          fi
        done

    - name: Check file sizes
      run: |
        # Find files larger than 100KB
        large_files=$(find . -type f -size +100k ! -path "./.git/*" ! -path "./venv/*" ! -path "./__pycache__/*" ! -name "*.png" ! -name "*.jpg" ! -name "*.jpeg" ! -name "*.gif")
        if [ ! -z "$large_files" ]; then
          echo "⚠️ Large files detected (>100KB):"
          echo "$large_files"
          echo "Consider using Git LFS for large files"
        fi

  lint-and-format:
    name: Lint & Format
    needs: pre-checks
    if: needs.pre-checks.outputs.python-files-changed == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip and pre-commit
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-lint-${{ env.CACHE_NUMBER }}-${{ hashFiles('requirements*.txt', '.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-lint-${{ env.CACHE_NUMBER }}-

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit ruff mypy
        pip install types-PyYAML types-requests

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files --show-diff-on-failure

    - name: Upload lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-results
        path: |
          .mypy_cache/
          .ruff_cache/
        retention-days: 1

  type-check:
    name: Type Checking
    needs: pre-checks
    if: needs.pre-checks.outputs.python-files-changed == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-typecheck-${{ env.CACHE_NUMBER }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-typecheck-${{ env.CACHE_NUMBER }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy types-PyYAML types-requests

    - name: Run mypy
      run: |
        mypy src/ --ignore-missing-imports --show-error-codes --pretty
      continue-on-error: true

  test-matrix:
    name: Tests (Python ${{ matrix.python-version }})
    needs: [pre-checks, lint-and-format]
    if: needs.pre-checks.outputs.python-files-changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-test-py${{ matrix.python-version }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-test-py${{ matrix.python-version }}-${{ env.CACHE_NUMBER }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-xdist pytest-timeout

    - name: Run unit tests
      run: |
        pytest tests/unit/ -m unit \
          -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=junit-${{ matrix.python-version }}.xml \
          --timeout=60 \
          -n auto

    - name: Upload coverage
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-py${{ matrix.python-version }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          junit-*.xml
          coverage.xml
        retention-days: 7

  security-scan:
    name: Security Scan
    needs: pre-checks
    if: needs.pre-checks.outputs.python-files-changed == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache security tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-security-${{ env.CACHE_NUMBER }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-security-${{ env.CACHE_NUMBER }}-

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit

    - name: Run Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
      continue-on-error: true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
      continue-on-error: true

    - name: Run pip-audit
      run: |
        pip-audit --desc || true
      continue-on-error: true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  build-and-publish:
    name: Build Package
    needs: [lint-and-format, test-matrix]
    if: success()
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for setuptools_scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache build tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.CACHE_NUMBER }}-

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution
      run: |
        python -m build

    - name: Check distribution
      run: |
        twine check dist/*
        ls -lah dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distribution
        path: dist/
        retention-days: 7

  final-status:
    name: CI Status
    needs: [lint-and-format, type-check, test-matrix, security-scan, build-and-publish]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Check status
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check individual job results
        if [[ "${{ needs.lint-and-format.result }}" == "success" ]]; then
          echo "✅ **Linting & Formatting**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Linting & Formatting**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.type-check.result }}" == "success" ]]; then
          echo "✅ **Type Checking**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Type Checking**: Has issues (non-blocking)" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.test-matrix.result }}" == "success" ]]; then
          echo "✅ **Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ **Security**: No critical issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security**: Review security reports" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.build-and-publish.result }}" == "success" ]]; then
          echo "✅ **Build**: Package built successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build**: Build failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "_Run triggered by: ${{ github.event_name }} on ${{ github.ref }}_" >> $GITHUB_STEP_SUMMARY

        # Fail if critical jobs failed
        if [[ "${{ needs.lint-and-format.result }}" != "success" ]] || \
           [[ "${{ needs.test-matrix.result }}" != "success" ]] || \
           [[ "${{ needs.build-and-publish.result }}" != "success" ]]; then
          echo "CI Pipeline failed!"
          exit 1
        fi
