name: Documentation Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'docs/**'
      - '.github/workflows/documentation.yml'
      - 'requirements*.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docs/**'
      - '.github/workflows/documentation.yml'
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version tags

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Cache documentation build
      uses: actions/cache@v3
      with:
        path: |
          docs/_build
          .pytest_cache
        key: ${{ runner.os }}-docs-${{ hashFiles('docs/**/*.rst', 'docs/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-docs-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r docs/requirements.txt
        # Install package in editable mode for autodoc
        pip install -e .

    - name: Run doctests
      run: |
        cd docs
        make doctest
        # Also run doctests on source files
        python -m doctest -v ../src/providers/base.py
        python -m doctest -v ../src/evaluation/improved_evaluation.py
        python -m doctest -v ../src/config/settings.py
      continue-on-error: false

    - name: Check documentation coverage
      run: |
        cd docs
        make coverage
        # Generate coverage report
        python -c "
        import os
        coverage_file = '_build/coverage/python.txt'
        if os.path.exists(coverage_file):
            with open(coverage_file) as f:
                content = f.read()
                print('Documentation Coverage Report:')
                print(content)
                # Fail if too many undocumented items
                undocumented = content.count('WARNING')
                if undocumented > 50:
                    print(f'ERROR: Too many undocumented items: {undocumented}')
                    exit(1)
        "

    - name: Build HTML documentation
      run: |
        cd docs
        # Build with warnings as errors
        sphinx-build -W -b html . _build/html
        # Create .nojekyll file for GitHub Pages
        touch _build/html/.nojekyll

    - name: Test notebook execution
      run: |
        # Test that example notebooks can execute
        jupyter nbconvert --execute --to html docs/notebooks/*.ipynb
      continue-on-error: true  # Don't fail if notebooks require API keys

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-html
        path: docs/_build/html/
        retention-days: 30

    - name: Generate documentation report
      if: always()
      run: |
        echo "## Documentation Build Report" > docs_report.md
        echo "" >> docs_report.md
        echo "### Build Status" >> docs_report.md
        echo "- Doctests: âœ… Passed" >> docs_report.md
        echo "- Coverage: âœ… Checked" >> docs_report.md
        echo "- HTML Build: âœ… Successful" >> docs_report.md
        echo "" >> docs_report.md
        echo "### Statistics" >> docs_report.md
        echo "- Total pages: $(find docs/_build/html -name '*.html' | wc -l)" >> docs_report.md
        echo "- Total size: $(du -sh docs/_build/html | cut -f1)" >> docs_report.md
        echo "" >> docs_report.md
        echo "### Preview" >> docs_report.md
        echo "Documentation artifacts have been uploaded and can be downloaded from the workflow run." >> docs_report.md

    - name: Comment PR with documentation preview
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('docs_report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ“š Documentation Build Preview\n\n${report}\n\n[Download Documentation Artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
          });

  deploy-docs:
    needs: build-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-html
        path: ./public

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  deploy-to-readthedocs:
    needs: build-docs
    if: github.event_name == 'release'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Trigger Read the Docs build
      env:
        RTD_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
      run: |
        # Trigger build via webhook (if configured)
        if [ -n "$RTD_TOKEN" ]; then
          curl -X POST \
            -H "Authorization: Token $RTD_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"branch": "'${{ github.ref_name }}'"}' \
            https://readthedocs.org/api/v3/projects/llm-lab/versions/${{ github.ref_name }}/builds/
        fi
      continue-on-error: true

  check-links:
    runs-on: ubuntu-latest
    needs: build-docs

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download documentation
      uses: actions/download-artifact@v3
      with:
        name: documentation-html
        path: ./docs_html

    - name: Check documentation links
      uses: lycheeverse/lychee-action@v1
      with:
        args: --verbose --no-progress './docs_html/**/*.html'
        fail: false  # Don't fail the workflow on broken links

    - name: Upload link check results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: link-check-results
        path: lychee-out.md
